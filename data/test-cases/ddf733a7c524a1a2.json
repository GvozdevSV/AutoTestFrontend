{
  "uid" : "ddf733a7c524a1a2",
  "name" : "открытие нового окна",
  "fullName" : "tests.alerts_frame_windows_test.TestBrowserWindows#test_new_window",
  "historyId" : "fdc19c853e533baa3c6b1228ba32d5e8",
  "time" : {
    "start" : 1714646768066,
    "stop" : 1714646773468,
    "duration" : 5402
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <alerts_frame_windows_test.TestAlertsFrameWindows.TestBrowserWindows object at 0x7efc0b5a16c0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e82202d0cf5096536252d5a554531e20\")>\n\n    @allure.title('открытие нового окна')\n    def test_new_window(self, driver):\n        test_new_window_page = BrowserWindowsPage(driver, 'https://demoqa.com/browser-windows')\n        test_new_window_page.open()\n>       new_window_text = test_new_window_page.check_opened_new_window()\n\ntests/alerts_frame_windows_test.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/alerts_frame_windows_page.py:23: in check_opened_new_window\n    self.element_is_visible(self.locators.NEW_WINDOW_BUTTON).click()\npages/base_page.py:17: in element_is_visible\n    return wait(self.driver, timeout).until(EC.visibility_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e82202d0cf5096536252d5a554531e20\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7efc0c044550>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../local/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "driver",
    "time" : {
      "start" : 1714646767317,
      "stop" : 1714646768066,
      "duration" : 749
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1714646751735,
      "stop" : 1714646751755,
      "duration" : 20
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <alerts_frame_windows_test.TestAlertsFrameWindows.TestBrowserWindows object at 0x7efc0b5a16c0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e82202d0cf5096536252d5a554531e20\")>\n\n    @allure.title('открытие нового окна')\n    def test_new_window(self, driver):\n        test_new_window_page = BrowserWindowsPage(driver, 'https://demoqa.com/browser-windows')\n        test_new_window_page.open()\n>       new_window_text = test_new_window_page.check_opened_new_window()\n\ntests/alerts_frame_windows_test.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/alerts_frame_windows_page.py:23: in check_opened_new_window\n    self.element_is_visible(self.locators.NEW_WINDOW_BUTTON).click()\npages/base_page.py:17: in element_is_visible\n    return wait(self.driver, timeout).until(EC.visibility_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e82202d0cf5096536252d5a554531e20\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x7efc0c044550>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../local/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException",
    "steps" : [ {
      "name" : "открыть",
      "time" : {
        "start" : 1714646768067,
        "stop" : 1714646768397,
        "duration" : 330
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "проверка открытия нового окна",
      "time" : {
        "start" : 1714646768397,
        "stop" : 1714646773468,
        "duration" : 5071
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: \n\n",
      "statusTrace" : "  File \"/usr/local/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/usr/workspace/pages/alerts_frame_windows_page.py\", line 23, in check_opened_new_window\n    self.element_is_visible(self.locators.NEW_WINDOW_BUTTON).click()\n  File \"/usr/local/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/usr/workspace/pages/base_page.py\", line 17, in element_is_visible\n    return wait(self.driver, timeout).until(EC.visibility_of_element_located(locator))\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/support/wait.py\", line 95, in until\n    raise TimeoutException(message, screen, stacktrace)\n",
      "steps" : [ {
        "name" : "элемент видим",
        "time" : {
          "start" : 1714646768397,
          "stop" : 1714646773468,
          "duration" : 5071
        },
        "status" : "broken",
        "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: \n\n",
        "statusTrace" : "  File \"/usr/local/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/usr/workspace/pages/base_page.py\", line 17, in element_is_visible\n    return wait(self.driver, timeout).until(EC.visibility_of_element_located(locator))\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/support/wait.py\", line 95, in until\n    raise TimeoutException(message, screen, stacktrace)\n",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "locator",
          "value" : "('css selector', 'button[id=\"windowButton\"]')"
        }, {
          "name" : "timeout",
          "value" : "5"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 1,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 3,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1714646773476,
      "stop" : 1714646773531,
      "duration" : 55
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "suite",
    "value" : "Alerts, Frame & Windows"
  }, {
    "name" : "feature",
    "value" : "Browser Windows"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "subSuite",
    "value" : "TestAlertsFrameWindows"
  }, {
    "name" : "host",
    "value" : "112b3e9cd18b"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.alerts_frame_windows_test"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "ddf733a7c524a1a2.json",
  "parameterValues" : [ ]
}