{
  "uid" : "db292574557cbb4c",
  "name" : "открываем новую вкладку",
  "fullName" : "tests.alerts_frame_windows_test.TestBrowserWindows#test_new_tab",
  "historyId" : "c48b86a57a25d5ca5f558159851d288e",
  "time" : {
    "start" : 1714646752519,
    "stop" : 1714646767209,
    "duration" : 14690
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <alerts_frame_windows_test.TestAlertsFrameWindows.TestBrowserWindows object at 0x7efc0b5a1450>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"669b7d495ba1229ec1c740b196c4aae5\")>\n\n    @allure.title('открываем новую вкладку')\n    def test_new_tab(self, driver):\n        test_new_tab_page = BrowserWindowsPage(driver, 'https://demoqa.com/browser-windows')\n        test_new_tab_page.open()\n>       new_tab_text = test_new_tab_page.check_opened_new_tab()\n\ntests/alerts_frame_windows_test.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/alerts_frame_windows_page.py:18: in check_opened_new_tab\n    new_tab_text = self.element_is_present(self.locators.CHECK_NEW_TAB).text\npages/base_page.py:25: in element_is_present\n    return wait(self.driver, timeout).until(EC.presence_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"669b7d495ba1229ec1c740b196c4aae5\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x7efc0c34ab90>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../local/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "driver",
    "time" : {
      "start" : 1714646751755,
      "stop" : 1714646752518,
      "duration" : 763
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "_session_faker",
    "time" : {
      "start" : 1714646751735,
      "stop" : 1714646751755,
      "duration" : 20
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <alerts_frame_windows_test.TestAlertsFrameWindows.TestBrowserWindows object at 0x7efc0b5a1450>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"669b7d495ba1229ec1c740b196c4aae5\")>\n\n    @allure.title('открываем новую вкладку')\n    def test_new_tab(self, driver):\n        test_new_tab_page = BrowserWindowsPage(driver, 'https://demoqa.com/browser-windows')\n        test_new_tab_page.open()\n>       new_tab_text = test_new_tab_page.check_opened_new_tab()\n\ntests/alerts_frame_windows_test.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/alerts_frame_windows_page.py:18: in check_opened_new_tab\n    new_tab_text = self.element_is_present(self.locators.CHECK_NEW_TAB).text\npages/base_page.py:25: in element_is_present\n    return wait(self.driver, timeout).until(EC.presence_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"669b7d495ba1229ec1c740b196c4aae5\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x7efc0c34ab90>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../local/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException",
    "steps" : [ {
      "name" : "открыть",
      "time" : {
        "start" : 1714646752519,
        "stop" : 1714646761947,
        "duration" : 9428
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "проверка открытия новой вкладки",
      "time" : {
        "start" : 1714646761947,
        "stop" : 1714646767209,
        "duration" : 5262
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: \n\n",
      "statusTrace" : "  File \"/usr/local/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/usr/workspace/pages/alerts_frame_windows_page.py\", line 18, in check_opened_new_tab\n    new_tab_text = self.element_is_present(self.locators.CHECK_NEW_TAB).text\n  File \"/usr/local/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/usr/workspace/pages/base_page.py\", line 25, in element_is_present\n    return wait(self.driver, timeout).until(EC.presence_of_element_located(locator))\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/support/wait.py\", line 95, in until\n    raise TimeoutException(message, screen, stacktrace)\n",
      "steps" : [ {
        "name" : "элемент видим",
        "time" : {
          "start" : 1714646761947,
          "stop" : 1714646761969,
          "duration" : 22
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "locator",
          "value" : "('css selector', 'button[id=\"tabButton\"]')"
        }, {
          "name" : "timeout",
          "value" : "5"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "stepsCount" : 0,
        "hasContent" : true
      }, {
        "name" : "элемент представлен",
        "time" : {
          "start" : 1714646762138,
          "stop" : 1714646767208,
          "duration" : 5070
        },
        "status" : "broken",
        "statusMessage" : "selenium.common.exceptions.TimeoutException: Message: \n\n",
        "statusTrace" : "  File \"/usr/local/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/usr/workspace/pages/base_page.py\", line 25, in element_is_present\n    return wait(self.driver, timeout).until(EC.presence_of_element_located(locator))\n  File \"/usr/local/lib/python3.10/site-packages/selenium/webdriver/support/wait.py\", line 95, in until\n    raise TimeoutException(message, screen, stacktrace)\n",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "locator",
          "value" : "('css selector', 'h1[id=\"sampleHeading\"]')"
        }, {
          "name" : "timeout",
          "value" : "5"
        } ],
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : true,
        "stepsCount" : 0,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 2,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 4,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1714646767252,
      "stop" : 1714646767315,
      "duration" : 63
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "suite",
    "value" : "Alerts, Frame & Windows"
  }, {
    "name" : "feature",
    "value" : "Browser Windows"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "subSuite",
    "value" : "TestAlertsFrameWindows"
  }, {
    "name" : "host",
    "value" : "112b3e9cd18b"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.alerts_frame_windows_test"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "db292574557cbb4c.json",
  "parameterValues" : [ ]
}